{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from \"react\";\nimport { base } from \"../utils/airtableUtils\";\nexport default function usePlayerGroups() {\n  const {\n    0: playerGroups,\n    1: setPlayerGroups\n  } = useState([]);\n  useEffect(() => {\n    if (playerGroups.length === 0) {\n      base(\"Players\").select({\n        view: \"Grid view\"\n      }).eachPage(function page(records) {\n        const players = [];\n        records.forEach(function (record) {\n          const player = _objectSpread({\n            id: record.id\n          }, record.fields);\n\n          players.push(player);\n        });\n        setPlayerGroups(divideGroups(players));\n      }, function done(err) {\n        if (err) {\n          console.error(err);\n          return;\n        }\n      });\n    }\n  }, [playerGroups]);\n\n  function divideGroups(players) {\n    const splits = [0, 5, 15, 25, 35, 45, 55, 65, 150];\n    let newArray = []; // Split playerGroups into groups\n\n    for (let i = 0; i < splits.length; i++) {\n      if (splits[i + 1]) {\n        let group = players.slice(splits[i], splits[i + 1]); // Insert group to each player object\n\n        const updatedGroup = group.map(curr => {\n          curr.group = `group-${i + 1}`;\n          return curr;\n        });\n        newArray.push(updatedGroup);\n      }\n    }\n\n    return newArray;\n  }\n\n  return {\n    playerGroups\n  };\n}","map":{"version":3,"sources":["/Users/orrymevorach/Desktop/pga-next/hooks/usePlayerGroups.js"],"names":["useState","useEffect","base","usePlayerGroups","playerGroups","setPlayerGroups","length","select","view","eachPage","page","records","players","forEach","record","player","id","fields","push","divideGroups","done","err","console","error","splits","newArray","i","group","slice","updatedGroup","map","curr"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,IAAT,QAAqB,wBAArB;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkCL,QAAQ,CAAC,EAAD,CAAhD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIG,YAAY,CAACE,MAAb,KAAwB,CAA5B,EAA+B;AAC7BJ,MAAAA,IAAI,CAAC,SAAD,CAAJ,CACGK,MADH,CACU;AACNC,QAAAA,IAAI,EAAE;AADA,OADV,EAIGC,QAJH,CAKI,SAASC,IAAT,CAAcC,OAAd,EAAuB;AACrB,cAAMC,OAAO,GAAG,EAAhB;AACAD,QAAAA,OAAO,CAACE,OAAR,CAAgB,UAAUC,MAAV,EAAkB;AAChC,gBAAMC,MAAM;AACVC,YAAAA,EAAE,EAAEF,MAAM,CAACE;AADD,aAEPF,MAAM,CAACG,MAFA,CAAZ;;AAIAL,UAAAA,OAAO,CAACM,IAAR,CAAaH,MAAb;AACD,SAND;AAOAV,QAAAA,eAAe,CAACc,YAAY,CAACP,OAAD,CAAb,CAAf;AACD,OAfL,EAgBI,SAASQ,IAAT,CAAcC,GAAd,EAAmB;AACjB,YAAIA,GAAJ,EAAS;AACPC,UAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACA;AACD;AACF,OArBL;AAuBD;AACF,GA1BQ,EA0BN,CAACjB,YAAD,CA1BM,CAAT;;AA4BA,WAASe,YAAT,CAAsBP,OAAtB,EAA+B;AAC7B,UAAMY,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,EAAe,EAAf,EAAmB,EAAnB,EAAuB,EAAvB,EAA2B,EAA3B,EAA+B,GAA/B,CAAf;AACA,QAAIC,QAAQ,GAAG,EAAf,CAF6B,CAG7B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAAClB,MAA3B,EAAmCoB,CAAC,EAApC,EAAwC;AACtC,UAAIF,MAAM,CAACE,CAAC,GAAG,CAAL,CAAV,EAAmB;AACjB,YAAIC,KAAK,GAAGf,OAAO,CAACgB,KAAR,CAAcJ,MAAM,CAACE,CAAD,CAApB,EAAyBF,MAAM,CAACE,CAAC,GAAG,CAAL,CAA/B,CAAZ,CADiB,CAEjB;;AACA,cAAMG,YAAY,GAAGF,KAAK,CAACG,GAAN,CAAUC,IAAI,IAAI;AACrCA,UAAAA,IAAI,CAACJ,KAAL,GAAc,SAAQD,CAAC,GAAG,CAAE,EAA5B;AACA,iBAAOK,IAAP;AACD,SAHoB,CAArB;AAIAN,QAAAA,QAAQ,CAACP,IAAT,CAAcW,YAAd;AACD;AACF;;AAED,WAAOJ,QAAP;AACD;;AAED,SAAO;AACLrB,IAAAA;AADK,GAAP;AAGD","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { base } from \"../utils/airtableUtils\";\n\nexport default function usePlayerGroups() {\n  const [playerGroups, setPlayerGroups] = useState([]);\n\n  useEffect(() => {\n    if (playerGroups.length === 0) {\n      base(\"Players\")\n        .select({\n          view: \"Grid view\",\n        })\n        .eachPage(\n          function page(records) {\n            const players = [];\n            records.forEach(function (record) {\n              const player = {\n                id: record.id,\n                ...record.fields,\n              };\n              players.push(player);\n            });\n            setPlayerGroups(divideGroups(players));\n          },\n          function done(err) {\n            if (err) {\n              console.error(err);\n              return;\n            }\n          }\n        );\n    }\n  }, [playerGroups]);\n\n  function divideGroups(players) {\n    const splits = [0, 5, 15, 25, 35, 45, 55, 65, 150];\n    let newArray = [];\n    // Split playerGroups into groups\n    for (let i = 0; i < splits.length; i++) {\n      if (splits[i + 1]) {\n        let group = players.slice(splits[i], splits[i + 1]);\n        // Insert group to each player object\n        const updatedGroup = group.map(curr => {\n          curr.group = `group-${i + 1}`;\n          return curr;\n        });\n        newArray.push(updatedGroup);\n      }\n    }\n\n    return newArray;\n  }\n\n  return {\n    playerGroups,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}